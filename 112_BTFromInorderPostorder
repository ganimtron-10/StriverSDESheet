#include<bits/stdc++.h>

TreeNode<int>* BT(vector<int>& inOrder, vector<int>& postOrder,
 int is, int ie, int ps, int pe, map<int, int>& hsh) {
    if (is > ie || ps > pe) return NULL;

    int curRootInd = hsh[postOrder[pe]];

    TreeNode<int>* root = new TreeNode<int>(postOrder[pe]);
    root->left = BT(inOrder, postOrder, 
                    is, curRootInd - 1, 
                    ps, ps + curRootInd - is - 1, hsh);
    root->right = BT(inOrder, postOrder,
                    curRootInd + 1, ie,
                    ps + curRootInd - is, pe - 1, hsh);

    return root;
}

TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) {
    if (inOrder.size() != postOrder.size()) return NULL;

    map<int, int> hsh;
    for (int i = 0; i < inOrder.size(); i++) {
        hsh[inOrder[i]] = i;
    }

    return BT(inOrder, postOrder, 0, inOrder.size() - 1, 0, postOrder.size() - 1, hsh);
}
