
string serializeTree(TreeNode<int> *root)
{
 //    Write your code here for serializing the tree
    if(root == NULL) return "";
    string ans = "";
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()){
        TreeNode<int> *cur = q.front();
        q.pop();
        if(cur == NULL){
            ans += "-1 ";
        }else{
            ans += to_string(cur->data)+" ";
        }

        if(cur){
            q.push(cur->left);
            q.push(cur->right);
        }
        
    }
    return ans;
}

TreeNode<int>* deserializeTree(string &serialized)
{
 //    Write your code here for deserializing the tree
    if(serialized == "") return NULL;
    queue<TreeNode<int> *> q;
    stringstream ss(serialized);
    string s;
    getline(ss,s,' ');
    TreeNode<int> *root = new TreeNode<int>(stoi(s));
    q.push(root);
    while(!q.empty()){
        TreeNode<int> *cur = q.front();
        q.pop();
        
        getline(ss,s,' ');
        if(s == "-1"){
            cur->left = NULL;
        }else{
            cur->left = new TreeNode<int>(stoi(s));
            q.push(cur->left);
        }

        getline(ss,s,' ');
        if(s == "-1"){
            cur->right = NULL;
        }else{
            cur->right = new TreeNode<int>(stoi(s));
            q.push(cur->right);
        }
    }
    return root;
}
