void dfs(vector<vector<int>> &adj, int start, vector<int>& comp, vector<int>& vis){
    vis[start] = 1;
    comp.push_back(start);
    for(auto child: adj[start]){
        if(not vis[child]){
            dfs(adj,child,comp,vis);
        }
    }
}


vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here

    vector<vector<int>> adj(V);
    for(int i = 0; i < E; i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }


    vector<int> vis(V+1);
    vector<vector<int>> ans;

    for(int i = 0; i < V; i++){
        if(not vis[i]){
            vector<int> comp;
            dfs(adj,i, comp, vis);
            ans.push_back(comp);
        }
    }
    return ans;
}