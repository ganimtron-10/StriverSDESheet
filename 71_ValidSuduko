bool isPossible(int matrix[9][9], int x, int y, int val) {
    // Check row and column
    for (int i = 0; i < 9; i++) {
        if (matrix[x][i] == val || matrix[i][y] == val) {
            return false;
        }
    }

    // Check the 3x3 subgrid
    int rowStart = x - x % 3;
    int colStart = y - y % 3;
    for (int i = rowStart; i < rowStart + 3; i++) {
        for (int j = colStart; j < colStart + 3; j++) {
            if (matrix[i][j] == val) {
                return false;
            }
        }
    }

    return true;
}

bool fill(int matrix[9][9]) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (matrix[i][j] == 0) {
                for (int k = 1; k <= 9; k++) {
                    if (isPossible(matrix, i, j, k)) {
                        matrix[i][j] = k;
                        if (fill(matrix)) {
                            return true;  // A valid solution is found
                        }
                        matrix[i][j] = 0;  // Backtrack
                    }
                }
                return false;  // No valid solution for this cell
            }
        }
    }
    return true;  // Entire Sudoku grid is filled
}

bool isItSudoku(int matrix[9][9]) {
    return fill(matrix);
}

