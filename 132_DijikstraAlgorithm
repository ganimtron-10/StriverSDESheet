#include <bits/stdc++.h> 

vector<int> dijkstra(vector<vector<int>>& vec, int vertices, int edges, int source) {
    vector<vector<pair<int, int>>> adj(vertices, vector<pair<int, int>>());
    for (auto row : vec) {
        adj[row[0]].push_back({row[1], row[2]});
        adj[row[1]].push_back({row[0], row[2]});
    }

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    vector<int> dist(vertices, INT_MAX);
    dist[source] = 0;
    pq.push({0, source});  // Corrected initialization

    while (!pq.empty()) {
        auto cur = pq.top();
        pq.pop();
        for (auto node : adj[cur.second]) {
            if (dist[node.first] > cur.first + node.second) {
                dist[node.first] = cur.first + node.second;
                pq.push({dist[node.first], node.first});
            }
        }
    }

    return dist;
}
