/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

class Node{
    public:
    Node *links[26];
    bool flag;

    Node(){
        for(int i = 0;i < 26; i++){
            links[i] = NULL;
        }
        flag = false;
    }

    bool containsChar(char c){
        if(links[c-'a'] != NULL) return true;
        return false;
    }

    Node* getCharNode(char c){
        if(containsChar(c)){
            return links[c-'a'];
        }
        return NULL;
    }
};

class Trie {

public:

    /** Initialize your data structure here. */
    Node *root;
    Trie() {
        root = new Node(); 
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node *cur = root;
        for(int i = 0; i < word.size(); i++){
            if(!cur->containsChar(word[i])){
                cur->links[word[i]-'a'] = new Node();
            }
            cur = cur->getCharNode(word[i]);
        }
        cur->flag = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node *cur = root;
        for(int i = 0; i < word.size(); i++){
            if(!cur->containsChar(word[i])){
                return false;
            }
            cur = cur->getCharNode(word[i]);
        }
        return cur->flag;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node *cur = root;
        for(int i = 0; i < prefix.size(); i++){
            if(!cur->containsChar(prefix[i])){
                return false;
            }
            cur = cur->getCharNode(prefix[i]);
        }
        return true;
    }
};
