bool dfs(vector<vector<int>>& adj, int node, vector<int>& vis, vector<int>& pvis) {
    vis[node] = 1;
    pvis[node] = 1;

    for (auto child : adj[node]) {
        if (!vis[child]) {
            if (dfs(adj, child, vis, pvis))
                return true;
        } else if (pvis[child]) {
            return true;
        }
    }

    pvis[node] = 0;
    return false;
}

bool detectCycleInDirectedGraph(int n, vector<pair<int, int>>& edges) {
    vector<vector<int>> adj(n + 1, vector<int>());

    for (auto edge : edges) {
        adj[edge.first].push_back(edge.second);
    }

    vector<int> vis(n + 1, 0);
    vector<int> pvis(n + 1, 0);

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            if (dfs(adj, i, vis, pvis))
                return true;
        }
    }

    return false;
}


// 1
// 5
// 8
// 1 4
// 1 5
// 1 2
// 4 1
// 2 4
// 3 4
// 5 2
// 1 3