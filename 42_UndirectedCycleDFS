bool dfs(vector<vector<int>> &adj, int node, int parent, vector<int> &vis){
    vis[node] = 1;
    for(auto child: adj[node]){
        if(! vis[child]){
            if(dfs(adj,child,node,vis) == true) return true;
        }else if(child != parent){
            return true;
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<vector<int>> adj(n+1,vector<int>());
    for(int i = 0; i < edges.size(); i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }

    vector<int> vis(n+1,0);
    for(int i = 1; i <= n; i++){
        if(! vis[i]){
            if(dfs(adj,i,-1,vis) == true) return "Yes";
        }
    }

    return "No";

}
